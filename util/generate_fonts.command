#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Double click to execute bash script.

import os
import sys
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
FONT_NAME = "Arial Bold.ttf"
FONT_SIZE = 10 # 9 10
IMG_WIDTH = 9 # 6
IMG_HEIGHT = 12 # 12
MIN_CHAR_IMG_WIDTH = 5

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
#print("SCRIPT_DIR={0}".format(SCRIPT_DIR))

# –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
FONT_PATH = os.path.join(SCRIPT_DIR, "fonts", FONT_NAME)

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä
TEXTURES_DIR = os.path.join(SCRIPT_DIR, "..", "textures")
os.makedirs(TEXTURES_DIR, exist_ok=True)

# –°–∏–º–≤–æ–ª—ã Latin-1 Supplement (U+00A0 ‚Äì U+00FF)
LATIN1_CHARS = "".join(chr(i) for i in range(0x00A0, 0x0100))

# –°–∏–º–≤–æ–ª—ã ASCII (U+0020 ‚Äì U+007E)
ASCII_CHARS = "".join(chr(i) for i in range(32, 127))  # –°–∏–º–≤–æ–ª—ã –æ—Ç 32 –¥–æ 126 (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª –∏ –≤—Å–µ ASCII –∑–Ω–∞–∫–∏)

# –°–∏–º–≤–æ–ª—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (U+0400 ‚Äì U+04FF)
CYRILLIC_CHARS = "".join(chr(i) for i in range(0x0400, 0x0500))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è fallback (–Ω–∞–ø—Ä–∏–º–µ—Ä, "‚ñ°")
FALLBACK_CHAR = "\u25A2" # –≠—Ç–æ —Å–∏–º–≤–æ–ª "‚ñ°"

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã (ASCII, Latin-1 –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
ALL_CHARS = ASCII_CHARS + LATIN1_CHARS + CYRILLIC_CHARS + FALLBACK_CHAR

# –ü—É—Ç—å –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –æ–∫—Ä—É–∂–µ–Ω–∏—é
VENV_PATH = os.path.join(SCRIPT_DIR, "venv")
#print("VENV_PATH={0}".format(f"{VENV_PATH}"))

def prepare_python_env(): 
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    IN_VENV = sys.prefix != sys.base_prefix

    # –ï—Å–ª–∏ –Ω–µ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –Ω–µ–º
    if not IN_VENV:
        print("üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        # –ï—Å–ª–∏ venv –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        if not os.path.exists(VENV_PATH):
            print("üîπ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞—é venv...")
            subprocess.run([sys.executable, "-m", "venv", VENV_PATH])

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Python –≤–Ω—É—Ç—Ä–∏ venv
        PYTHON_EXEC = os.path.join(VENV_PATH, "bin", "python3")  # –í Linux –∏–ª–∏ macOS

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        print("üîπ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã...")
        subprocess.run([f"{PYTHON_EXEC}", "-m", "pip", "install", "--quiet", "pillow"])

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ venv
        print("üîπ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–∫—Ä–∏–ø—Ç –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏...")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ subprocess —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—É—Ç—ë–º
        subprocess.run([PYTHON_EXEC] + sys.argv)

        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        sys.exit()

def get_font(font_path, fint_size):
    try:
        font = ImageFont.truetype(font_path, fint_size)
        return font
    except IOError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –®—Ä–∏—Ñ—Ç {font_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

def detect_max_char_size(font):
    finded_max_width = 0
    finded_max_height = 0

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º characters.txt –¥–ª—è –∑–∞–ø–∏—Å–∏
    characters_txt = os.path.join(SCRIPT_DIR, "..", "characters.txt")
    with open(characters_txt, "w", encoding="utf-8") as char_file:
        for letter in ALL_CHARS:
            # –ü–æ–ª—É—á–∞–µ–º Unicode –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞
            char_code = ord(letter)

            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º (grayscale)
            img = Image.new("1", (100, 100), 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º "1" –¥–ª—è —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ —Ä–µ–∂–∏–º–∞

            draw = ImageDraw.Draw(img)

            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
            text_bbox = draw.textbbox((0, 0), letter, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]

            if text_width>finded_max_width:
                finded_max_width=text_width

            if text_height>finded_max_height:
                finded_max_height=text_height

    return finded_max_width, finded_max_height

def get_needed_img_size(char_file_name):
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º (grayscale)
    img = Image.new("1", (100, 100), 0)

    draw = ImageDraw.Draw(img)

    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
    text_bbox = draw.textbbox((0, 0), letter, font=font)
    text_width = text_bbox[2] - text_bbox[0]
    text_height = text_bbox[3] - text_bbox[1]

    return text_width, text_height

prepare_python_env()

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Pillow (—É–∂–µ –≤ venv)
from PIL import Image, ImageDraw, ImageFont, ImageFilter

font = get_font(FONT_PATH, FONT_SIZE)
if not font:  # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—ã–π—Ç–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞
    sys.exit("üö´ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —à—Ä–∏—Ñ—Ç–∞.")

max_char_img_width,  max_char_img_height = detect_max_char_size(font)
print("max_char_img_width={0} max_char_img_height={1}".format(max_char_img_width, max_char_img_height))

# –û—Ç–∫—Ä—ã–≤–∞–µ–º characters.txt –¥–ª—è –∑–∞–ø–∏—Å–∏
characters_txt = os.path.join(SCRIPT_DIR, "..", "characters.txt")
with open(characters_txt, "w", encoding="utf-8") as char_file:
    for letter in ALL_CHARS:
        # –ü–æ–ª—É—á–∞–µ–º Unicode –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞
        char_code = ord(letter)

        # –ò–º—è —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–¥–µ —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è 'A' -> 0041)
        name = f"char_{char_code:04X}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å 4 –∑–Ω–∞–∫–∞–º–∏

        char_img_width, char_img_height = get_needed_img_size(name)

        #if char_img_width <= 4:
        #    new_char_img_width = MIN_CHAR_IMG_WIDTH
        #else:
        #    new_char_img_width = char_img_width

        new_char_img_width = char_img_width

        # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new("1", (new_char_img_width, max_char_img_height), 0)

        draw = ImageDraw.Draw(img)

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        text_bbox = draw.textbbox((0, 0), letter, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]

        x = (new_char_img_width - text_width) #// 2
        y = 0  # –ë–µ–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è

        print("letter={0} name={1} x={2} y={3} new_char_img_width={4} char_img_width={5}".format(letter, name, x, y, new_char_img_width, text_width))

        # –†–∏—Å—É–µ–º –±—É–∫–≤—É
        draw.text((x, y), letter, font=font, fill=1)

        img_final = Image.new("RGBA", (new_char_img_width, max_char_img_height), (0, 0, 0, 0))
        pixels_final = img_final.load()

        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –∏–∑ —á–µ—Ä–Ω–æ-–±–µ–ª–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA
        pixels = img.load()
        for i in range(new_char_img_width):
            for j in range(max_char_img_height):
                if pixels[i, j] == 0:  # –ß–µ—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å (0)
                    pixels_final[i, j] = (0, 0, 0, 0)  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                else:  # –ë–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å (1)
                    pixels_final[i, j] = (255, 255, 255, 255)  # –ë–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å —Å –ø–æ–ª–Ω–æ–π –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ LA (grayscale + –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª)
        img_la = img_final.convert("LA")

        # –ü—É—Ç—å –¥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_path = os.path.join(TEXTURES_DIR, f"{name}.png")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_la.save(img_path)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ characters.txt
        # –§–æ—Ä–º–∞—Ç: —Å–∏–º–≤–æ–ª, –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ .png, —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        char_file.write(f"{letter}\n{name}\n{char_img_width}\n")

print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'textures/' –∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ 'characters.txt'.")